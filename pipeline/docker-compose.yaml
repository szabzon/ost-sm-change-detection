# Description: docker-compose file for the pipeline
version: '3.6'

# Networks
# ost-sm: network for the services,
#this will be used by the services to communicate with each other
networks:
  ost-sm:
    driver: bridge

# Services
# Zookeeper, Kafka
services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - ost-sm

  # kafka service using wurstmeister/kafka image
  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_CREATE_TOPICS: "hai-input-1:1:1,hai-preprocessed-1:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./spark:/sparkScripts:rw
    depends_on:
      - zookeeper
    networks:
      - ost-sm
    #command: "bash -c 'start-kafka.sh && ls && sleep 10 && kafka-topics.sh --bootstrap-server localhost:9092 --create --topic hai-input --partitions 1 --replication-factor 1'"

  # telegraf, influxdb, grafana

  # telegraf service
  telegraf:
    image: telegraf:latest
    restart: always
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - influxdb
      - kafka
    links:
      - influxdb
      - kafka
    ports:
      - "8125:8125"
    networks:
      - ost-sm

  # influxdb service
  influxdb:
    image: influxdb:latest
    ports:
      - "8086:8086"
    environment:
      # some of these do not seem to have any effect
      # e.g. token and users are not created
      # TODO: investigate
      # when you first run the docker-compose file, you need to create the token and users manually!
      INFLUXDB_DB: influxdb
      INFLUXDB_ADMIN_USER: ${ADMIN_USERNAME}
      INFLUXDB_ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      INFLUXDB_USER: telegraf_user
      INFLUXDB_USER_PASSWORD: telegraf_pass
      INFLUXDB_USER_READ_DATABASE: telegraf
      INFLUXDB_USER_WRITE_DATABASE: telegraf
      INFLUXDB_ADMIN_USER_TOKEN: my_token
      INFLUXDB_ORG: ${INFLUXDB_ORG}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
    volumes:
      # - ./influxdb:/var/lib/influxdb
      - influxdb-data:/var/lib/influxdb2:rw
    env_file:
      - .env
    networks:
      - ost-sm

  # grafana service
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ALLOW_EMBEDDING: "true"
    links:
      - influxdb
      - telegraf
    networks:
      - ost-sm

  # spark service
  pyspark:
    container_name: pyspark
    image: docker.io/bitnami/spark:3
    hostname: spark
    build: ./spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
        - 8080:8080
    networks:
        - ost-sm
    volumes:
        - ./spark:/sparkScripts:rw

volumes:
  influxdb-data: